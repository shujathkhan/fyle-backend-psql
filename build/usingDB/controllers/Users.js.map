{"version":3,"sources":["../../../src/usingDB/controllers/Users.js"],"names":["User","create","req","res","body","email","password","status","send","Helper","isValidEmail","hashPassword","createQuery","values","Date","db","query","rows","token","generateToken","id","console","log","routine","login","text","comparePassword","delete","deleteQuery","user"],"mappings":"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","file":"Users.js","sourcesContent":["\nimport moment from 'moment';\nimport uuidv4 from 'uuid/v4';\nimport db from '../db';\nimport Helper from './Helper';\n\n\nconst User = {\n    /**\n     * Create A User\n     * @param {object} req \n     * @param {object} res\n     * @returns {object} reflection object \n     */\n    async create(req, res) {\n      if (!req.body.email || !req.body.password) {\n        return res.status(400).send({'message': 'Some values are missing'});\n      }\n      if (!Helper.isValidEmail(req.body.email)) {\n        return res.status(400).send({ 'message': 'Please enter a valid email address' });\n      }\n      const hashPassword = Helper.hashPassword(req.body.password);\n  \n      const createQuery = `INSERT INTO\n        users(id, email, password, created_date, modified_date)\n        VALUES($1, $2, $3, $4, $5)\n        returning *`;\n      const values = [\n        uuidv4(),\n        req.body.email,\n        hashPassword,\n        moment(new Date()),\n        moment(new Date())\n      ];\n  \n      try {\n        const { rows } = await db.query(createQuery, values);\n        const token = Helper.generateToken(rows[0].id);\n        console.log(token)\n        return res.status(201).send({ token });\n      } catch(error) {\n        if (error.routine === '_bt_check_unique') {\n            // console.log(token)\n\n            return res.status(400).send({ 'message': 'User with that EMAIL already exist' })\n\n        }\n        return res.status(400).send(error);\n      }\n    },\n    /**\n     * Login\n     * @param {object} req \n     * @param {object} res\n     * @returns {object} user object \n     */\n    async login(req, res) {\n      if (!req.body.email || !req.body.password) {\n        return res.status(400).send({'message': 'Some values are missing'});\n      }\n      if (!Helper.isValidEmail(req.body.email)) {\n        return res.status(400).send({ 'message': 'Please enter a valid email address' });\n      }\n      const text = 'SELECT * FROM users WHERE email = $1';\n      try {\n        const { rows } = await db.query(text, [req.body.email]);\n        if (!rows[0]) {\n          return res.status(400).send({'message': 'The credentials you provided is incorrect'});\n        }\n        if(!Helper.comparePassword(rows[0].password, req.body.password)) {\n          return res.status(400).send({ 'message': 'The credentials you provided is incorrect' });\n        }\n        const token = Helper.generateToken(rows[0].id);\n        console.log(token)\n        return res.status(200).send({ token });\n      } catch(error) {\n        return res.status(400).send(error)\n      }\n    },\n    /**\n     * Delete A User\n     * @param {object} req \n     * @param {object} res \n     * @returns {void} return status code 204 \n     */\n    async delete(req, res) {\n      const deleteQuery = 'DELETE FROM users WHERE id=$1 returning *';\n      try {\n        const { rows } = await db.query(deleteQuery, [req.user.id]);\n        if(!rows[0]) {\n          return res.status(404).send({'message': 'user not found'});\n        }\n        return res.status(204).send({ 'message': 'deleted' });\n      } catch(error) {\n        return res.status(400).send(error);\n      }\n    }\n  }\n  \n  export default User;\n  "]}