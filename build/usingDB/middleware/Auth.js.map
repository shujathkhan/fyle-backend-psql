{"version":3,"sources":["../../../src/usingDB/middleware/Auth.js"],"names":["Auth","verifyToken","req","res","next","token","headers","status","send","jwt","verify","process","env","SECRET","decoded","text","db","query","userId","rows","user","id"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,IAAI,GAAG;AACX;;;;;;;AAOMC,EAAAA,WARK;AAAA;AAAA;AAAA,6CAQOC,GARP,EAQYC,GARZ,EAQiBC,IARjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AASHC,cAAAA,KATG,GASKH,GAAG,CAACI,OAAJ,CAAY,gBAAZ,CATL;;AAAA,kBAULD,KAVK;AAAA;AAAA;AAAA;;AAAA,+CAWAF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAE,2BAAW;AAAb,eAArB,CAXA;;AAAA;AAAA;AAAA;AAAA,qBAceC,yBAAIC,MAAJ,CAAWL,KAAX,EAAkBM,OAAO,CAACC,GAAR,CAAYC,MAA9B,CAdf;;AAAA;AAcDC,cAAAA,OAdC;AAeDC,cAAAA,IAfC,GAeM,mCAfN;AAAA;AAAA,qBAgBgBC,eAAGC,KAAH,CAASF,IAAT,EAAe,CAACD,OAAO,CAACI,MAAT,CAAf,CAhBhB;;AAAA;AAAA;AAgBCC,cAAAA,IAhBD,QAgBCA,IAhBD;;AAAA,kBAiBHA,IAAI,CAAC,CAAD,CAjBD;AAAA;AAAA;AAAA;;AAAA,+CAkBEhB,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAE,2BAAW;AAAb,eAArB,CAlBF;;AAAA;AAoBPN,cAAAA,GAAG,CAACkB,IAAJ,GAAW;AAAEC,gBAAAA,EAAE,EAAEP,OAAO,CAACI;AAAd,eAAX;AACAd,cAAAA,IAAI;AArBG;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAuBAD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,aAvBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAb;eA4BeR,I","sourcesContent":["import jwt from 'jsonwebtoken';\nimport db from '../db';\n\nconst Auth = {\n  /**\n   * Verify Token\n   * @param {object} req \n   * @param {object} res \n   * @param {object} next\n   * @returns {object|void} response object \n   */\n  async verifyToken(req, res, next) {\n    const token = req.headers['x-access-token'];\n    if(!token) {\n      return res.status(400).send({ 'message': 'Token is not provided' });\n    }\n    try {\n      const decoded = await jwt.verify(token, process.env.SECRET);\n      const text = 'SELECT * FROM users WHERE id = $1';\n      const { rows } = await db.query(text, [decoded.userId]);\n      if(!rows[0]) {\n        return res.status(400).send({ 'message': 'The token you provided is invalid' });\n      }\n      req.user = { id: decoded.userId };\n      next();\n    } catch(error) {\n      return res.status(400).send(error);\n    }\n  }\n}\n\nexport default Auth;"],"file":"Auth.js"}