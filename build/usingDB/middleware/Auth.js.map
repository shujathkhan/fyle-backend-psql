{"version":3,"sources":["../../../src/usingDB/middleware/Auth.js"],"names":["SECRET","Auth","verifyToken","req","res","next","token","headers","status","send","jwt","verify","decoded","text","db","query","userId","rows","user","id"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAMA,SAAS,sBAAf;AACA,IAAMC,OAAO;AACX;;;;;;;AAOMC,aARK;AAAA,wFAQOC,GARP,EAQYC,GARZ,EAQiBC,IARjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AASHC,mBATG,GASKH,IAAII,OAAJ,CAAY,gBAAZ,CATL;;AAAA,kBAULD,KAVK;AAAA;AAAA;AAAA;;AAAA,+CAWAF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE,WAAW,uBAAb,EAArB,CAXA;;AAAA;AAAA;AAAA;AAAA,qBAceC,uBAAIC,MAAJ,CAAWL,KAAX,EAAkBN,MAAlB,CAdf;;AAAA;AAcDY,qBAdC;;AAeP;AACMC,kBAhBC,GAgBM,mCAhBN;AAAA;AAAA,qBAiBgBC,aAAGC,KAAH,CAASF,IAAT,EAAe,CAACD,QAAQI,MAAT,CAAf,CAjBhB;;AAAA;AAAA;AAiBCC,kBAjBD,SAiBCA,IAjBD;;AAAA,kBAkBHA,KAAK,CAAL,CAlBG;AAAA;AAAA;AAAA;;AAAA,+CAmBEb,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE,WAAW,mCAAb,EAArB,CAnBF;;AAAA;AAqBPN,kBAAIe,IAAJ,GAAW,EAAEC,IAAIP,QAAQI,MAAd,EAAX;AACAX;AAtBO;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAwBAD,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,aAxBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAb;;kBA6BeR,I","file":"Auth.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport db from '../db';\n\nconst SECRET = 'myrandomkeytoencrypt';\nconst Auth = {\n  /**\n   * Verify Token\n   * @param {object} req \n   * @param {object} res \n   * @param {object} next\n   * @returns {object|void} response object \n   */\n  async verifyToken(req, res, next) {\n    const token = req.headers['x-access-token'];\n    if(!token) {\n      return res.status(400).send({ 'message': 'Token is not provided' });\n    }\n    try {\n      const decoded = await jwt.verify(token, SECRET);\n      // console.log(decoded)\n      const text = 'SELECT * FROM users WHERE id = $1';\n      const { rows } = await db.query(text, [decoded.userId]);\n      if(!rows[0]) {\n        return res.status(400).send({ 'message': 'The token you provided is invalid' });\n      }\n      req.user = { id: decoded.userId };\n      next();\n    } catch(error) {\n      return res.status(400).send(error);\n    }\n  }\n}\n\nexport default Auth;"]}